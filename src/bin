#!/usr/bin/env node
const fs = require('fs');
const sade = require('sade');
const kleur = require('kleur');
const gitlabCiPkg = require('../package.json');
const gitlabCiValidate = require('../src/index');

const prog = sade(gitlabCiPkg.name);

prog.version(gitlabCiPkg.version);

prog
  .command('validate [file]', '', { default: true })
  .describe('Manage set of tracked repositories')
  .option(
    '--host, -H',
    'Change the gitlab host (default to https://gitlab.com)'
  )
  .option(
    '--private-token, -P',
    'Authenticate to gitlab api using a private token'
  )
  .option(
    '--project-id, -p',
    'Toggle individual project scoped execution, specify the project id context'
  )
  .option('--error-warn, -w', 'Toggle warnings as an error condition')

  .action((file, opts) => {
    // Default file is .gitlab-ci.yml
    if (!file) {
      file = '.gitlab-ci.yml';
    }

    if (!fs.existsSync(file)) {
      console.log(kleur.red(`${file} does not exists!`));
      process.exit(1);
    }
    gitlabCiValidate(file, {
      host: opts.host,
      private_token: opts['private-token'],
      project_id: opts['project-id'],
    })
      .then((data) => {
        if (data.valid || data.status === 'valid') {
          console.log(kleur.green(`${file} is valid`));
          data.warnings.forEach((warn) => {
            console.log(kleur.yellow(`  - ${warn}`));
          });
          if (data.warnings.length && opts['error-warn']) {
            process.exit(1);
          } else {
            process.exit(0);
          }
        } else if (data.error) {
          console.log(kleur.red(`${data.error} - ${data.error_description}`));
          process.exit(1);
        } else if (data.message) {
          console.log(kleur.yellow(`${data.message}`));
          process.exit(1);
        } else {
          console.log(kleur.red(`${file} is invalid:`));
          data.errors.forEach((err) => {
            console.log(kleur.red(`  - ${err}`));
          });
          data.warnings.forEach((warn) => {
            console.log(kleur.yellow(`  - ${warn}`));
          });
          process.exit(1);
        }
      })
      .catch((err) => {
        console.error(kleur.red(err));
        process.exit(1);
      });
  });

prog.parse(process.argv);
